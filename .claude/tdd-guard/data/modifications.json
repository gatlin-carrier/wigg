{
  "session_id": "06c13c01-6085-43da-8da6-9d7c4d441f8b",
  "transcript_path": "C:\\Users\\gatli\\.claude\\projects\\C--Users-gatli-Projects-wigg\\06c13c01-6085-43da-8da6-9d7c4d441f8b.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Edit",
  "tool_input": {
    "file_path": "C:\\Users\\gatli\\Projects\\wigg\\src\\hooks\\social\\useFollowUser.ts",
    "old_string": "ï»¿import { useCallback, useEffect, useState } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useToast } from '@/hooks/use-toast';\nimport { notifyUserFollowed } from '@/services/notificationTriggers';\n\nexport function useFollowUser(targetUserId?: string | null) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isFollowing, setIsFollowing] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (!user?.id || !targetUserId || user.id === targetUserId) {\n      setIsFollowing(false);\n      return;\n    }\n    let active = true;\n    (async () => {\n      const { data, error } = await supabase\n        .from('user_follows')\n        .select('id')\n        .eq('follower_id', user.id)\n        .eq('following_id', targetUserId)\n        .maybeSingle();\n      if (!active) return;\n      if (error) {\n        console.error('[useFollowUser] load failed', error);\n        return;\n      }\n      setIsFollowing(Boolean(data));\n    })();\n    return () => {\n      active = false;\n    };\n  }, [user?.id, targetUserId]);\n\n  const follow = useCallback(async () => {\n    if (!user?.id || !targetUserId || user.id === targetUserId) return;\n    setLoading(true);\n    const { error } = await supabase.from('user_follows').insert({\n      follower_id: user.id,\n      following_id: targetUserId,\n    });\n    setLoading(false);\n    if (error) {\n      toast({ title: 'Could not follow', description: error.message, variant: 'destructive' });\n      return;\n    }\n    setIsFollowing(true);\n    notifyUserFollowed({ followerId: user.id, followerName: user.user_metadata?.username ?? user.email ?? 'Someone', targetUserId }).catch(() => undefined);\n  }, [user?.id, user?.email, targetUserId, toast]);\n\n  const unfollow = useCallback(async () => {\n    if (!user?.id || !targetUserId) return;\n    setLoading(true);\n    const { error } = await supabase\n      .from('user_follows')\n      .delete()\n      .eq('follower_id', user.id)\n      .eq('following_id', targetUserId);\n    setLoading(false);\n    if (error) {\n      toast({ title: 'Could not unfollow', description: error.message, variant: 'destructive' });\n      return;\n    }\n    setIsFollowing(false);\n  }, [user?.id, targetUserId, toast]);",
    "new_string": "import { useCallback, useEffect, useState } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { socialService } from '@/lib/api/services/social';\nimport { useToast } from '@/hooks/use-toast';\nimport { notifyUserFollowed } from '@/services/notificationTriggers';\n\nexport function useFollowUser(targetUserId?: string | null) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isFollowing, setIsFollowing] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (!user?.id || !targetUserId || user.id === targetUserId) {\n      setIsFollowing(false);\n      return;\n    }\n    let active = true;\n\n    const checkFollowingStatus = async () => {\n      try {\n        const result = await socialService.checkFollowing({\n          followerId: user.id,\n          targetUserId\n        });\n        if (!active) return;\n\n        if (result.success) {\n          setIsFollowing(result.data);\n        } else {\n          console.error('[useFollowUser] load failed', result.error);\n        }\n      } catch (error) {\n        if (active) {\n          console.error('[useFollowUser] load failed', error);\n        }\n      }\n    };\n\n    checkFollowingStatus();\n\n    return () => {\n      active = false;\n    };\n  }, [user?.id, targetUserId]);\n\n  const follow = useCallback(async () => {\n    if (!user?.id || !targetUserId || user.id === targetUserId) return;\n    setLoading(true);\n\n    try {\n      const result = await socialService.followUser({\n        followerId: user.id,\n        targetUserId\n      });\n\n      if (result.success) {\n        setIsFollowing(true);\n        notifyUserFollowed({\n          followerId: user.id,\n          followerName: user.user_metadata?.username ?? user.email ?? 'Someone',\n          targetUserId\n        }).catch(() => undefined);\n      } else {\n        toast({ title: 'Could not follow', description: result.error.message, variant: 'destructive' });\n      }\n    } catch (error: any) {\n      toast({ title: 'Could not follow', description: error.message, variant: 'destructive' });\n    } finally {\n      setLoading(false);\n    }\n  }, [user?.id, user?.email, user?.user_metadata?.username, targetUserId, toast]);\n\n  const unfollow = useCallback(async () => {\n    if (!user?.id || !targetUserId) return;\n    setLoading(true);\n\n    try {\n      const result = await socialService.unfollowUser({\n        followerId: user.id,\n        targetUserId\n      });\n\n      if (result.success) {\n        setIsFollowing(false);\n      } else {\n        toast({ title: 'Could not unfollow', description: result.error.message, variant: 'destructive' });\n      }\n    } catch (error: any) {\n      toast({ title: 'Could not unfollow', description: error.message, variant: 'destructive' });\n    } finally {\n      setLoading(false);\n    }\n  }, [user?.id, targetUserId, toast]);"
  }
}