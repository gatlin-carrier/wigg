{
  "session_id": "3ae4e252-d66f-49b0-b244-2e92dab755f3",
  "transcript_path": "C:\\Users\\gatli\\.claude\\projects\\C--Users-gatli-Projects-wigg\\3ae4e252-d66f-49b0-b244-2e92dab755f3.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Edit",
  "tool_input": {
    "file_path": "C:\\Users\\gatli\\Projects\\wigg\\src\\hooks\\__tests__\\useUserWiggs.test.ts",
    "old_string": "  it('should detect production vs non-production URLs correctly', () => {\n    // Mock window.location for URL testing\n    const originalLocation = window.location;\n\n    // Test production URLs (should NOT use test data)\n    ['https://wigg.app', 'https://www.wigg.app', 'https://wigg.app/', 'https://www.wigg.app/some/path'].forEach(url => {\n      delete (window as any).location;\n      window.location = new URL(url) as any;\n      expect(testUtils.environment.isProductionUrl()).toBe(true);\n      expect(testUtils.environment.shouldUseTestData()).toBe(false); // Should be false for production\n    });\n\n    // Test non-production URLs (should use test data)\n    ['http://localhost:3000', 'https://my-branch-preview.vercel.app', 'https://staging.example.com'].forEach(url => {\n      delete (window as any).location;\n      window.location = new URL(url) as any;\n      expect(testUtils.environment.isProductionUrl()).toBe(false);\n      expect(testUtils.environment.shouldUseTestData()).toBe(true); // Should be true for non-production\n    });\n\n    // Restore original location\n    window.location = originalLocation;\n  });",
    "new_string": "  it('should detect production vs non-production URLs correctly', () => {\n    // Mock window.location for URL testing\n    const originalLocation = window.location;\n\n    // Save original function to restore later\n    const originalIsTestEnv = testUtils.environment.isTestEnvironment;\n\n    // Test production URLs (should NOT use test data)\n    ['https://wigg.app', 'https://www.wigg.app', 'https://wigg.app/', 'https://www.wigg.app/some/path'].forEach(url => {\n      delete (window as any).location;\n      window.location = new URL(url) as any;\n\n      // Temporarily override isTestEnvironment to test URL logic\n      testUtils.environment.isTestEnvironment = () => false;\n\n      expect(testUtils.environment.isProductionUrl()).toBe(true);\n      expect(testUtils.environment.shouldUseTestData()).toBe(false); // Should be false for production\n\n      // Restore original function\n      testUtils.environment.isTestEnvironment = originalIsTestEnv;\n    });\n\n    // Test non-production URLs (should use test data)\n    ['http://localhost:3000', 'https://my-branch-preview.vercel.app', 'https://staging.example.com'].forEach(url => {\n      delete (window as any).location;\n      window.location = new URL(url) as any;\n\n      // Temporarily override isTestEnvironment to test URL logic\n      testUtils.environment.isTestEnvironment = () => false;\n\n      expect(testUtils.environment.isProductionUrl()).toBe(false);\n      expect(testUtils.environment.shouldUseTestData()).toBe(true); // Should be true for non-production\n\n      // Restore original function\n      testUtils.environment.isTestEnvironment = originalIsTestEnv;\n    });\n\n    // Restore original location\n    window.location = originalLocation;\n  });"
  }
}