{
  "session_id": "ca364f58-a33d-452c-bee5-510b37f23103",
  "transcript_path": "C:\\Users\\gatli\\.claude\\projects\\C--Users-gatli-Projects-wigg\\ca364f58-a33d-452c-bee5-510b37f23103.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Write",
  "tool_input": {
    "file_path": "C:\\Users\\gatli\\Projects\\wigg\\.github\\rum-crawler.cjs",
    "content": "const { test, expect } = require('@playwright/test');\nconst fs = require('fs');\nconst path = require('path');\n\n// Load routes from seed file or use defaults\nfunction loadRoutes() {\n  const routesPath = path.join(process.cwd(), 'routes.json');\n  const seedPath = path.join(process.cwd(), 'src', 'routes.seed.json');\n\n  if (fs.existsSync(routesPath)) {\n    return JSON.parse(fs.readFileSync(routesPath, 'utf8'));\n  } else if (fs.existsSync(seedPath)) {\n    return JSON.parse(fs.readFileSync(seedPath, 'utf8'));\n  } else {\n    return [\"/\", \"/dashboard\", \"/search\", \"/feed\"];\n  }\n}\n\n// Validate BASE_URL\nfunction validateBaseUrl(url) {\n  if (!url) {\n    throw new Error('BASE_URL environment variable is required');\n  }\n\n  try {\n    const parsed = new URL(url);\n    if (!['http:', 'https:'].includes(parsed.protocol)) {\n      throw new Error('BASE_URL must use http or https protocol');\n    }\n    return url;\n  } catch (error) {\n    throw new Error(`Invalid BASE_URL: ${error.message}`);\n  }\n}\n\nasync function crawlRoute(page, baseUrl, route) {\n  console.log(`📍 Testing route: ${route}`);\n\n  try {\n    // Navigate to route\n    const response = await page.goto(`${baseUrl}${route}`, {\n      waitUntil: 'networkidle',\n      timeout: 15000\n    });\n\n    // Verify successful response\n    if (response.status() >= 400) {\n      throw new Error(`HTTP ${response.status()}`);\n    }\n\n    console.log(`✅ Route ${route} loaded successfully (${response.status()})`);\n\n    // Wait for initial paint\n    await page.waitForLoadState('domcontentloaded');\n\n    // Light interactions to trigger INP/CLS measurements\n    await page.mouse.move(100, 300);\n    await page.mouse.wheel(0, 500);\n\n    // Try to focus/tab through elements\n    try {\n      await page.keyboard.press('Tab');\n      await page.waitForTimeout(500);\n    } catch (e) {\n      // Ignore tab errors\n    }\n\n    // Wait for metrics to settle\n    await page.waitForTimeout(2000);\n\n    // Navigate away to flush metrics\n    await page.goto('about:blank');\n\n    console.log(`✅ Completed interactions for ${route}`);\n    return { route, success: true, status: response.status() };\n\n  } catch (error) {\n    console.log(`❌ Error testing ${route}:`, error.message);\n\n    // Take screenshot on failure\n    try {\n      await page.screenshot({\n        path: `error-${route.replace(/[^a-zA-Z0-9]/g, '_')}.png`,\n        fullPage: true\n      });\n    } catch (screenshotError) {\n      console.log('Could not capture screenshot:', screenshotError.message);\n    }\n\n    return { route, success: false, error: error.message };\n  }\n}\n\n// Main test function\ntest('RUM crawl all routes', async ({ page }) => {\n  const routes = loadRoutes();\n  const baseUrl = validateBaseUrl(process.env.BASE_URL);\n  const maxRoutes = parseInt(process.env.MAX_ROUTES || '5');\n\n  console.log(`🎯 Testing ${Math.min(routes.length, maxRoutes)} routes on ${baseUrl}`);\n\n  const results = [];\n  const testRoutes = routes.slice(0, maxRoutes);\n\n  for (let i = 0; i < testRoutes.length; i++) {\n    const result = await crawlRoute(page, baseUrl, testRoutes[i]);\n    results.push(result);\n  }\n\n  // Generate summary\n  const successful = results.filter(r => r.success).length;\n  const failed = results.filter(r => !r.success).length;\n\n  console.log(`\\n📊 Summary: ${successful} successful, ${failed} failed`);\n\n  if (failed > 0) {\n    console.log('❌ Failed routes:');\n    results.filter(r => !r.success).forEach(r => {\n      console.log(`  - ${r.route}: ${r.error}`);\n    });\n  }\n\n  // Expect at least one route to succeed\n  expect(successful).toBeGreaterThan(0);\n});"
  }
}