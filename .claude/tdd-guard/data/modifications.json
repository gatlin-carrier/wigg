{
  "session_id": "e91c461e-d935-40ca-9658-b10652d9eed9",
  "transcript_path": "C:\\Users\\gatli\\.claude\\projects\\C--Users-gatli-Projects-wigg\\e91c461e-d935-40ca-9658-b10652d9eed9.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Edit",
  "tool_input": {
    "file_path": "C:\\Users\\gatli\\Projects\\wigg\\src\\lib\\api\\services\\__tests__\\social.test.ts",
    "old_string": "    expect(mockDeleteChain.eq).toHaveBeenCalledWith('follower_id', 'user-123');\n    expect(mockDeleteChain.eq).toHaveBeenCalledWith('following_id', 'user-456');\n  });\n});",
    "new_string": "    expect(mockDeleteChain.eq).toHaveBeenCalledWith('follower_id', 'user-123');\n    expect(mockDeleteChain.eq).toHaveBeenCalledWith('following_id', 'user-456');\n  });\n\n  it('should handle errors in addComment with standardized error response', async () => {\n    const errorMessage = 'Comment insertion failed';\n    const mockFrom = {\n      insert: vi.fn().mockResolvedValue({ error: { message: errorMessage } })\n    };\n    (supabase.from as any).mockReturnValue(mockFrom);\n\n    const result = await socialService.addComment({\n      pointId: 'point-123',\n      userId: 'user-123',\n      content: 'Test comment'\n    });\n\n    expect(result.success).toBe(false);\n    expect(result.error.message).toBe(errorMessage);\n    expect(result.data).toBe(null);\n  });\n});"
  }
}