{
  "session_id": "c1033b02-a0dc-4976-bc8b-56ce2bf0034b",
  "transcript_path": "C:\\Users\\gatli\\.claude\\projects\\C--Users-gatli-Projects-wigg\\c1033b02-a0dc-4976-bc8b-56ce2bf0034b.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Edit",
  "tool_input": {
    "file_path": "C:\\Users\\gatli\\Projects\\wigg\\src\\hooks/__tests__/useMediaUnits.test.tsx",
    "old_string": "    expect(result.current.units).toHaveLength(1);\n    expect(result.current.units[0].title).toBe('Test Movie');\n    expect(result.current.units[0].subtype).toBe('episode');\n    expect(result.current.units[0].runtimeSec).toBe(120 * 60);\n  });\n});",
    "new_string": "    expect(result.current.units).toHaveLength(1);\n    expect(result.current.units[0].title).toBe('Test Movie');\n    expect(result.current.units[0].subtype).toBe('episode');\n    expect(result.current.units[0].runtimeSec).toBe(120 * 60);\n  });\n\n  it('should fetch episodes for specific season when seasonNumber is provided', async () => {\n    const { getTvEpisodes } = await import('@/integrations/tmdb/client');\n\n    // Mock getTvEpisodes to return different episodes for different seasons\n    vi.mocked(getTvEpisodes).mockResolvedValue([\n      {\n        id: 'tmdb-ep-123-s2e1',\n        title: 'S2E1: Season 2 Premiere',\n        ordinal: 1,\n        subtype: 'episode',\n        runtimeSec: 42 * 60,\n        episodeNumber: 1,\n        seasonNumber: 2,\n      },\n      {\n        id: 'tmdb-ep-123-s2e2',\n        title: 'S2E2: Episode Two',\n        ordinal: 2,\n        subtype: 'episode',\n        runtimeSec: 42 * 60,\n        episodeNumber: 2,\n        seasonNumber: 2,\n      },\n    ]);\n\n    const tvMedia: MediaSearchResult = {\n      id: 'tv-123',\n      title: 'Test TV Show',\n      type: 'tv',\n      year: 2023,\n      externalIds: { tmdb_id: 123 },\n    };\n\n    const { result } = renderHook(() => useMediaUnits(tvMedia, 2), {\n      wrapper: createWrapper(),\n    });\n\n    await waitFor(() => {\n      expect(result.current.isLoading).toBe(false);\n    });\n\n    // Verify getTvEpisodes was called with season 2\n    expect(getTvEpisodes).toHaveBeenCalledWith(123, 2);\n\n    // Verify we got season 2 episodes\n    expect(result.current.units).toHaveLength(2);\n    expect(result.current.units[0].title).toBe('S2E1: Season 2 Premiere');\n    expect(result.current.units[0].seasonNumber).toBe(2);\n  });\n});"
  }
}