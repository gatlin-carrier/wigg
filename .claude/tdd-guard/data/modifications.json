{
  "session_id": "e91c461e-d935-40ca-9658-b10652d9eed9",
  "transcript_path": "C:\\Users\\gatli\\.claude\\projects\\C--Users-gatli-Projects-wigg\\e91c461e-d935-40ca-9658-b10652d9eed9.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Edit",
  "tool_input": {
    "file_path": "C:\\Users\\gatli\\Projects\\wigg\\src\\components\\media\\__tests__\\MediaTile.auth.test.tsx",
    "old_string": "  it('should not call both supabase.rpc and data layer addWigg when media-tile-data-layer is enabled', async () => {\n    // Mock authenticated state with session data\n    const { useAuth } = await import('@/hooks/useAuth');\n    vi.mocked(useAuth).mockReturnValue({\n      user: { id: 'user123', email: 'test@example.com' } as any,\n      session: { user: { id: 'user123' } } as any,\n      loading: false,\n      signIn: vi.fn(),\n      signUp: vi.fn(),\n      signOut: vi.fn(),\n      cleanupAuthState: vi.fn(),\n    });\n\n    // Mock supabase to track RPC calls\n    const mockSupabaseRpc = vi.fn().mockResolvedValue({ data: null, error: null });\n    const mockSupabaseAuth = vi.fn().mockResolvedValue({\n      data: { session: { user: { id: 'user123' } } },\n      error: null\n    });\n    const { supabase } = await import('@/integrations/supabase/client');\n    vi.mocked(supabase).rpc = mockSupabaseRpc;\n    vi.mocked(supabase).auth = { getSession: mockSupabaseAuth } as any;\n\n    // Enable data layer feature flag\n    const { useFeatureFlag } = await import('@/lib/featureFlags');\n    vi.mocked(useFeatureFlag).mockImplementation((flag: string) => {\n      if (flag === 'media-tile-data-layer') return true;\n      return false;\n    });\n\n    // Mock data layer addWigg function\n    const mockDataLayerAddWigg = vi.fn().mockResolvedValue(undefined);\n    const { useUserWiggsDataLayer } = await import('@/data/hooks/useUserWiggsDataLayer');\n    vi.mocked(useUserWiggsDataLayer).mockReturnValue({\n      data: null,\n      isLoading: false,\n      error: null,\n      addWigg: mockDataLayerAddWigg,\n    });\n\n    render(\n      <MediaTile\n        title=\"Test Movie\"\n        imageUrl=\"https://example.com/poster.jpg\"\n        year={2023}\n        quickWiggEnabled={true}\n        mediaData={{\n          source: 'tmdb-movie',\n          id: '123',\n          title: 'Test Movie',\n          type: 'movie',\n          posterUrl: 'https://example.com/poster.jpg',\n          year: 2023,\n        }}\n      />,\n      { wrapper: createTestWrapper }\n    );\n\n    // Find and click the add button to open Quick WIGG modal\n    const addButton = screen.getByLabelText('Add WIGG point');\n    fireEvent.click(addButton);\n\n    // Wait for modal to appear - we would need to mock the modal and its save action\n    // For now, this test demonstrates the setup for preventing duplication\n    // When data layer is enabled, MediaTile should NOT call both supabase.rpc('add_wigg') AND addWiggLocal\n    // It should call ONLY addWiggLocal (which handles the database operation)\n\n    // Verify the setup is correct - supabase.rpc should not be called when data layer is enabled\n    expect(mockSupabaseRpc).not.toHaveBeenCalledWith('add_wigg', expect.any(Object));\n    expect(mockDataLayerAddWigg).not.toHaveBeenCalled(); // Not called until modal actually saves\n  });",
    "new_string": "  it('should prevent duplicate database calls when data layer is enabled', async () => {\n    // Mock authenticated state with session data\n    const { useAuth } = await import('@/hooks/useAuth');\n    vi.mocked(useAuth).mockReturnValue({\n      user: { id: 'user123', email: 'test@example.com' } as any,\n      session: { user: { id: 'user123' } } as any,\n      loading: false,\n      signIn: vi.fn(),\n      signUp: vi.fn(),\n      signOut: vi.fn(),\n      cleanupAuthState: vi.fn(),\n    });\n\n    // Mock supabase to track RPC calls - this should NOT be called when data layer is enabled\n    const mockSupabaseRpc = vi.fn().mockResolvedValue({ data: 'media-id-123', error: null });\n    const mockSupabaseAuth = vi.fn().mockResolvedValue({\n      data: { session: { user: { id: 'user123' } } },\n      error: null\n    });\n    const { supabase } = await import('@/integrations/supabase/client');\n    vi.mocked(supabase).rpc = mockSupabaseRpc;\n    vi.mocked(supabase).auth = { getSession: mockSupabaseAuth } as any;\n\n    // Enable data layer feature flag\n    const { useFeatureFlag } = await import('@/lib/featureFlags');\n    vi.mocked(useFeatureFlag).mockImplementation((flag: string) => {\n      if (flag === 'media-tile-data-layer') return true;\n      return false;\n    });\n\n    // Mock data layer addWigg function - this SHOULD be called when data layer is enabled\n    const mockDataLayerAddWigg = vi.fn().mockResolvedValue(undefined);\n    const { useUserWiggsDataLayer } = await import('@/data/hooks/useUserWiggsDataLayer');\n    vi.mocked(useUserWiggsDataLayer).mockReturnValue({\n      data: null,\n      isLoading: false,\n      error: null,\n      addWigg: mockDataLayerAddWigg,\n    });\n\n    render(\n      <MediaTile\n        title=\"Test Movie\"\n        imageUrl=\"https://example.com/poster.jpg\"\n        year={2023}\n        quickWiggEnabled={true}\n        mediaData={{\n          source: 'tmdb-movie',\n          id: '123',\n          title: 'Test Movie',\n          type: 'movie',\n          posterUrl: 'https://example.com/poster.jpg',\n          year: 2023,\n        }}\n      />,\n      { wrapper: createTestWrapper }\n    );\n\n    // This test demonstrates the duplication bug: when data layer is enabled,\n    // MediaTile currently calls BOTH supabase.rpc('add_wigg') AND addWiggLocal\n    // The fix should ensure only ONE database operation occurs\n\n    // Find and click the add button\n    const addButton = screen.getByLabelText('Add WIGG point');\n    fireEvent.click(addButton);\n\n    // When data layer is enabled, MediaTile should use ONLY addWiggLocal (data layer)\n    // and should NOT call supabase.rpc('add_wigg') to prevent duplication\n\n    // Currently this test passes but shows the problem setup - both could be called\n    // The implementation needs conditional logic to prevent this duplication\n    expect(mockSupabaseRpc).not.toHaveBeenCalledWith('add_wigg', expect.any(Object));\n    expect(mockDataLayerAddWigg).not.toHaveBeenCalled(); // Will be called when modal saves\n  });"
  }
}