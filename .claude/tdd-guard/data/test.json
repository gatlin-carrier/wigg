{
  "testModules": [
    {
      "moduleId": "C:/Users/gatli/Projects/wigg/src/data/clients/__tests__/userPreferencesClient.test.ts",
      "tests": [
        {
          "name": "should get user preferences",
          "fullName": "userPreferencesClient > should get user preferences",
          "state": "passed"
        },
        {
          "name": "should update user preferences",
          "fullName": "userPreferencesClient > should update user preferences",
          "state": "passed"
        },
        {
          "name": "should follow DataLayerResponse pattern for getUserPreferences",
          "fullName": "userPreferencesClient > should follow DataLayerResponse pattern for getUserPreferences",
          "state": "passed"
        },
        {
          "name": "should follow DataLayerResponse pattern for updateUserPreferences",
          "fullName": "userPreferencesClient > should follow DataLayerResponse pattern for updateUserPreferences",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "C:/Users/gatli/Projects/wigg/src/data/clients/__tests__/socialClient.test.ts",
      "tests": [
        {
          "name": "should get like count for a wigg point",
          "fullName": "socialClient > should get like count for a wigg point",
          "state": "passed"
        },
        {
          "name": "should check if user has liked a wigg point",
          "fullName": "socialClient > should check if user has liked a wigg point",
          "state": "passed"
        },
        {
          "name": "should toggle like on a wigg point",
          "fullName": "socialClient > should toggle like on a wigg point",
          "state": "passed"
        },
        {
          "name": "should get comments for a wigg point",
          "fullName": "socialClient > should get comments for a wigg point",
          "state": "passed"
        },
        {
          "name": "should check if user is following another user",
          "fullName": "socialClient > should check if user is following another user",
          "state": "passed"
        },
        {
          "name": "should follow a user",
          "fullName": "socialClient > should follow a user",
          "state": "passed"
        },
        {
          "name": "should unfollow a user",
          "fullName": "socialClient > should unfollow a user",
          "state": "passed"
        },
        {
          "name": "should add comment to a wigg point",
          "fullName": "socialClient > should add comment to a wigg point",
          "state": "passed"
        },
        {
          "name": "should delete comment from a wigg point",
          "fullName": "socialClient > should delete comment from a wigg point",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "C:/Users/gatli/Projects/wigg/src/data/clients/__tests__/errorHandling.test.ts",
      "tests": [
        {
          "name": "should return standardized error response when Supabase operation fails",
          "fullName": "Error Handling > should return standardized error response when Supabase operation fails",
          "state": "passed"
        },
        {
          "name": "should return standardized success response when operation succeeds",
          "fullName": "Error Handling > should return standardized success response when operation succeeds",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "C:/Users/gatli/Projects/wigg/src/data/clients/__tests__/wiggPointsClient.test.ts",
      "tests": [
        {
          "name": "should fetch user wigg points for a media",
          "fullName": "wiggPointsClient > should fetch user wigg points for a media",
          "state": "passed"
        },
        {
          "name": "should call Supabase with correct parameters",
          "fullName": "wiggPointsClient > should call Supabase with correct parameters",
          "state": "passed"
        },
        {
          "name": "should use actual Supabase query result",
          "fullName": "wiggPointsClient > should use actual Supabase query result",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "C:/Users/gatli/Projects/wigg/src/data/hooks/__tests__/useWiggLikesDataLayer.test.ts",
      "tests": [
        {
          "name": "should accept enabled options parameter to prevent duplicate API calls",
          "fullName": "useWiggLikesDataLayer > should accept enabled options parameter to prevent duplicate API calls",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "C:/Users/gatli/Projects/wigg/src/data/clients/__tests__/mediaClient.test.ts",
      "tests": [
        {
          "name": "should search for movies",
          "fullName": "mediaClient > should search for movies",
          "state": "passed"
        },
        {
          "name": "should search for movies with page parameter",
          "fullName": "mediaClient > should search for movies with page parameter",
          "state": "passed"
        },
        {
          "name": "should perform multi-search across content types",
          "fullName": "mediaClient > should perform multi-search across content types",
          "state": "passed"
        },
        {
          "name": "should get detailed movie information",
          "fullName": "mediaClient > should get detailed movie information",
          "state": "passed"
        },
        {
          "name": "should get detailed TV show information",
          "fullName": "mediaClient > should get detailed TV show information",
          "state": "passed"
        },
        {
          "name": "should get trending movies",
          "fullName": "mediaClient > should get trending movies",
          "state": "passed"
        },
        {
          "name": "should create media entry in Supabase following data layer pattern",
          "fullName": "mediaClient > should create media entry in Supabase following data layer pattern",
          "state": "passed"
        },
        {
          "name": "should use Supabase RPC for createMedia instead of hardcoded response",
          "fullName": "mediaClient > should use Supabase RPC for createMedia instead of hardcoded response",
          "state": "passed"
        },
        {
          "name": "should get media by ID from database",
          "fullName": "mediaClient > should get media by ID from database",
          "state": "passed"
        },
        {
          "name": "should update media in database",
          "fullName": "mediaClient > should update media in database",
          "state": "passed"
        },
        {
          "name": "should delete media from database",
          "fullName": "mediaClient > should delete media from database",
          "state": "passed"
        },
        {
          "name": "should succeed with DELETE operations without requiring .single()",
          "fullName": "mediaClient > should succeed with DELETE operations without requiring .single()",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "C:/Users/gatli/Projects/wigg/src/data/hooks/__tests__/useUserWiggsDataLayer.test.ts",
      "tests": [
        {
          "name": "should use data layer client instead of direct Supabase calls",
          "fullName": "useUserWiggsDataLayer > should use data layer client instead of direct Supabase calls",
          "state": "passed"
        },
        {
          "name": "should calculate T2G estimate from wigg entries",
          "fullName": "useUserWiggsDataLayer > should calculate T2G estimate from wigg entries",
          "state": "passed"
        },
        {
          "name": "should implement addWigg using data layer client",
          "fullName": "useUserWiggsDataLayer > should implement addWigg using data layer client",
          "state": "passed"
        },
        {
          "name": "should allow configurable spoiler level in addWigg",
          "fullName": "useUserWiggsDataLayer > should allow configurable spoiler level in addWigg",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "C:/Users/gatli/Projects/wigg/src/data/clients/__tests__/socialClient.integration.test.ts",
      "tests": [
        {
          "name": "should get like count from real API via MSW",
          "fullName": "socialClient integration tests > should get like count from real API via MSW",
          "state": "failed",
          "errors": [
            {
              "message": "expected false to be true // Object.is equality",
              "stack": "AssertionError: expected false to be true // Object.is equality\n    at C:\\Users\\gatli\\Projects\\wigg\\src\\data\\clients\\__tests__\\socialClient.integration.test.ts:11:32\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///C:/Users/gatli/Projects/wigg/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20",
              "expected": "true",
              "actual": "false"
            }
          ]
        }
      ]
    },
    {
      "moduleId": "C:/Users/gatli/Projects/wigg/src/data/hooks/__tests__/useWiggPoints.test.ts",
      "tests": [
        {
          "name": "should fetch user wigg points for a media",
          "fullName": "useWiggPointsData > should fetch user wigg points for a media",
          "state": "passed"
        },
        {
          "name": "should call Supabase to fetch wigg points data",
          "fullName": "useWiggPointsData > should call Supabase to fetch wigg points data",
          "state": "passed"
        },
        {
          "name": "should use wiggPointsClient instead of direct Supabase calls",
          "fullName": "useWiggPointsData > should use wiggPointsClient instead of direct Supabase calls",
          "state": "passed"
        },
        {
          "name": "should return data from wiggPointsClient",
          "fullName": "useWiggPointsData > should return data from wiggPointsClient",
          "state": "passed"
        },
        {
          "name": "should provide addWiggPoint mutation function",
          "fullName": "useWiggPointsData > should provide addWiggPoint mutation function",
          "state": "passed"
        },
        {
          "name": "should call wiggPointsClient.createWiggPoint when addWiggPoint is called",
          "fullName": "useWiggPointsData > should call wiggPointsClient.createWiggPoint when addWiggPoint is called",
          "state": "failed",
          "errors": [
            {
              "message": "expected \"spy\" to be called with arguments: [ { media_id: 'media-123', …(4) } ]\u001b[90m\n\nReceived: \n\n\u001b[1m  1st spy call:\n\n\u001b[22m\u001b[33m@@ -3,7 +3,8 @@\u001b[90m\n\u001b[2m      \"media_id\": \"media-123\",\u001b[22m\n\u001b[2m      \"pos_kind\": \"percent\",\u001b[22m\n\u001b[2m      \"pos_value\": 60,\u001b[22m\n\u001b[2m      \"reason_short\": \"Test mutation\",\u001b[22m\n\u001b[2m      \"spoiler_level\": 2,\u001b[22m\n\u001b[31m+     \"user_id\": \"test-user-id\",\u001b[90m\n\u001b[2m    },\u001b[22m\n\u001b[2m  ]\u001b[22m\n\u001b[39m\u001b[90m\n\nNumber of calls: \u001b[1m1\u001b[22m\n\u001b[39m",
              "stack": "AssertionError: expected \"spy\" to be called with arguments: [ { media_id: 'media-123', …(4) } ]\u001b[90m\n\nReceived: \n\n\u001b[1m  1st spy call:\n\n\u001b[22m\u001b[33m@@ -3,7 +3,8 @@\u001b[90m\n\u001b[2m      \"media_id\": \"media-123\",\u001b[22m\n\u001b[2m      \"pos_kind\": \"percent\",\u001b[22m\n\u001b[2m      \"pos_value\": 60,\u001b[22m\n\u001b[2m      \"reason_short\": \"Test mutation\",\u001b[22m\n\u001b[2m      \"spoiler_level\": 2,\u001b[22m\n\u001b[31m+     \"user_id\": \"test-user-id\",\u001b[90m\n\u001b[2m    },\u001b[22m\n\u001b[2m  ]\u001b[22m\n\u001b[39m\u001b[90m\n\nNumber of calls: \u001b[1m1\u001b[22m\n\u001b[39m\n    at Proxy.<anonymous> (file:///C:/Users/gatli/Projects/wigg/node_modules/@vitest/expect/dist/index.js:1355:10)\n    at Proxy.<anonymous> (file:///C:/Users/gatli/Projects/wigg/node_modules/@vitest/expect/dist/index.js:1029:14)\n    at Proxy.toHaveBeenCalledWith (file:///C:/Users/gatli/Projects/wigg/node_modules/chai/index.js:1686:25)\n    at C:\\Users\\gatli\\Projects\\wigg\\src\\data\\hooks\\__tests__\\useWiggPoints.test.ts:250:46\n    at file:///C:/Users/gatli/Projects/wigg/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
            }
          ]
        },
        {
          "name": "should handle loading states correctly during mutation",
          "fullName": "useWiggPointsData > should handle loading states correctly during mutation",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "C:/Users/gatli/Projects/wigg/src/data/hooks/__tests__/useMediaDataLayer.test.ts",
      "tests": [
        {
          "name": "should fetch media by ID using data layer client",
          "fullName": "useMediaDataLayer > should fetch media by ID using data layer client",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "C:/Users/gatli/Projects/wigg/src/data/hooks/__tests__/useSocialData.test.tsx",
      "tests": [
        {
          "name": "should fetch like count and user like status",
          "fullName": "useSocialData > should fetch like count and user like status",
          "state": "passed"
        },
        {
          "name": "should return data when queries complete successfully",
          "fullName": "useSocialData > should return data when queries complete successfully",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "C:/Users/gatli/Projects/wigg/src/data/hooks/__tests__/useWiggPoints.context.test.tsx",
      "tests": [
        {
          "name": "should automatically inject user_id and media_id context when adding wigg point",
          "fullName": "useWiggPointsData Context Injection > should automatically inject user_id and media_id context when adding wigg point",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "C:/Users/gatli/Projects/wigg/src/data/clients/__tests__/wiggPersistenceClient.test.ts",
      "tests": [
        {
          "name": "should save a wigg rating",
          "fullName": "wiggPersistenceClient > should save a wigg rating",
          "state": "passed"
        },
        {
          "name": "should save a moment",
          "fullName": "wiggPersistenceClient > should save a moment",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "C:/Users/gatli/Projects/wigg/src/data/hooks/__tests__/useUserWiggsDataLayer.api.test.tsx",
      "tests": [
        {
          "name": "should have same API shape as useUserWiggs for MediaTile coexistence",
          "fullName": "useUserWiggsDataLayer API compatibility > should have same API shape as useUserWiggs for MediaTile coexistence",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "C:/Users/gatli/Projects/wigg/src/data/hooks/__tests__/useUserPreferencesDataLayer.test.ts",
      "tests": [
        {
          "name": "should fetch user preferences using data layer client",
          "fullName": "useUserPreferencesDataLayer > should fetch user preferences using data layer client",
          "state": "passed"
        }
      ]
    }
  ],
  "unhandledErrors": [],
  "reason": "failed"
}