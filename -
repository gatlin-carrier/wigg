import type { Meta, StoryObj } from '@storybook/react';
import React from 'react';
import { MemoryRouter } from 'react-router-dom';

import { MediaTile } from '@/components/media/MediaTile';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Sheet, SheetContent, SheetHeader, SheetTitle } from '@/components/ui/sheet';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Separator } from '@/components/ui/separator';
import { RatingButtons } from '@/components/wigg/RatingButtons';
import { WhyTagSelector, type SpoilerLevel } from '@/components/wigg/WhyTagSelector';
import { PacingBarcode } from '@/components/wigg/PacingBarcode';

type Variant = 'dialog' | 'sheet';

type MediaKind = 'movie' | 'tv' | 'anime' | 'manga' | 'game' | 'book';

type Media = {
  id: string;
  title: string;
  type: MediaKind;
  coverImage?: string;
  year?: number;
};

type Episode = { id: string; number: number; title: string };
type Season = { number: number; title: string; episodes: Episode[] };
type Units = { seasons?: Season[] };

function QuickWiggModal({
  open,
  onOpenChange,
  variant,
  media,
  units,
}: {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  variant: Variant;
  media: Media | null;
  units?: Units;
}) {
  const [note, setNote] = React.useState('');
  const [rating, setRating] = React.useState<number | undefined>();
  const [tags, setTags] = React.useState<string[]>([]);
  const [customTags, setCustomTags] = React.useState<string[]>([]);
  const [spoiler, setSpoiler] = React.useState<SpoilerLevel>('none');

  // Scope + episodic selection
  const isEpisodic = Boolean(media && (media.type === 'tv' || media.type === 'anime') && units?.seasons?.length);
  const [scope, setScope] = React.useState<'series' | 'season' | 'episode'>(isEpisodic ? 'episode' : 'series');
  const [seasonNo, setSeasonNo] = React.useState<string>('1');
  const [episodeNo, setEpisodeNo] = React.useState<string>('1');

  React.useEffect(() => {
    if (!isEpisodic) setScope('series');
  }, [isEpisodic]);

  const content = (
    <div className="space-y-4">
      {/* Context preview */}
      <div className="space-y-2">
        <div className="text-xs text-muted-foreground">{media?.title ? `Quick add for ${media.title}` : 'Quick Wigg'}</div>
        <div id="barcode-target">
          <PacingBarcode
            titleId={media ? `quick-${media.id}` : 'quick-demo'}
            height={40}
            segmentCount={20}
            segments={[]}
            dataScope="community"
            colorMode="heat"
            interactive={false}
            className="rounded border"
          />
        </div>
      </div>

      {/* Scope + episodic pickers */}
      {isEpisodic && (
        <div className="space-y-3">
          <div className="flex items-center gap-2 text-sm">
            <Label className="text-sm">Scope</Label>
            <div className="flex gap-1">
              {(['series', 'season', 'episode'] as const).map((s) => (
                <Button
                  key={s}
                  size="sm"
                  variant={scope === s ? 'default' : 'outline'}
                  onClick={() => setScope(s)}
                >
                  {s === 'series' ? 'Series' : s === 'season' ? 'Season' : 'Episode'}
                </Button>
              ))}
            </div>
          </div>

          {(scope === 'season' || scope === 'episode') && (
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
              <div>
                <Label className="text-xs">Season</Label>
                <Select value={seasonNo} onValueChange={setSeasonNo}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select season" />
                  </SelectTrigger>
                  <SelectContent>
                    {(units?.seasons || []).map((s) => (
                      <SelectItem key={s.number} value={String(s.number)}>
                        Season {s.number}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {scope === 'episode' && (
                <div>
                  <Label className="text-xs">Episode</Label>
                  <Select value={episodeNo} onValueChange={setEpisodeNo}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select episode" />
                    </SelectTrigger>
                    <SelectContent>
                      {(units?.seasons || [])
                        .find((s) => String(s.number) === seasonNo)?.episodes
                        ?.map((e) => (
                          <SelectItem key={e.id} value={String(e.number)}>
                            Episode {e.number}
                          </SelectItem>
                        ))}
                    </SelectContent>
                  </Select>
                </div>
              )}
            </div>
          )}
        </div>
      )}

      <Separator />

      {/* Quick rating */}
      <div>
        <div className="text-sm font-medium mb-2">Rating</div>
        <RatingButtons value={rating as any} onChange={(v) => setRating(v as number)} />
      </div>

      {/* Why tags */}
      <WhyTagSelector
        selectedTags={tags}
        onTagsChange={setTags}
        spoilerLevel={spoiler}
        onSpoilerChange={setSpoiler}
        customTags={customTags}
        onCustomTagsChange={setCustomTags}
      />

      {/* Notes */}
      <div className="space-y-1.5">
        <Label className="text-sm">Notes (optional)</Label>
        <Textarea
          value={note}
          onChange={(e) => setNote(e.target.value)}
          placeholder="What made this moment work?"
        />
      </div>

      <div className="flex justify-end gap-2 pt-2">
        <Button variant="outline" onClick={() => onOpenChange(false)}>
          Cancel
        </Button>
        <Button onClick={() => onOpenChange(false)}>Save</Button>
      </div>
    </div>
  );

  if (variant === 'sheet') {
    return (
      <Sheet open={open} onOpenChange={onOpenChange}>
        <SheetContent side="right" className="sm:max-w-lg">
          <SheetHeader>
            <SheetTitle>{media ? `Quick Wigg — ${media.title}` : 'Quick Wigg'}</SheetTitle>
          </SheetHeader>
          <div className="mt-4">{content}</div>
        </SheetContent>
      </Sheet>
    );
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>{media ? `Quick Wigg — ${media.title}` : 'Quick Wigg'}</DialogTitle>
        </DialogHeader>
        {content}
      </DialogContent>
    </Dialog>
  );
}

function GridDemo({ variant }: { variant: Variant }) {
  const [open, setOpen] = React.useState(false);
  const [active, setActive] = React.useState<Media | null>(null);
  const [activeUnits, setActiveUnits] = React.useState<Units | undefined>(undefined);

  // Mock catalog
  const items: Array<{ media: Media; imageUrl?: string; episodic?: boolean }> = [
    {
      media: { id: 'tv-001', title: 'The Long Show', type: 'tv', year: 2024 },
      imageUrl: undefined,
      episodic: true,
    },
    {
      media: { id: 'mv-001', title: 'Great Movie', type: 'movie', year: 2023 },
      imageUrl: undefined,
      episodic: false,
    },
    {
      media: { id: 'an-001', title: 'Galactic Saga', type: 'anime', year: 2022 },
      imageUrl: undefined,
      episodic: true,
    },
  ];

  const handleQuickAdd = (item: { media: Media; episodic?: boolean }) => {
    setActive(item.media);
    if (item.episodic) {
      // lightweight mock: 2 seasons, 6 eps each
      const seasons: Season[] = Array.from({ length: 2 }, (_, s) => ({
        number: s + 1,
        title: `Season ${s + 1}`,
        episodes: Array.from({ length: 6 }, (_, e) => ({
          id: `${item.media.id}-s${s + 1}e${e + 1}`,
          number: e + 1,
          title: `Episode ${e + 1}`,
        })),
      }));
      setActiveUnits({ seasons });
    } else {
      setActiveUnits(undefined);
    }
    setOpen(true);
  };

  return (
    <div className="min-h-[90vh] bg-background p-6">
      <div className="container mx-auto">
        <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4">
          {items.map((item) => (
            <MediaTile
              key={item.media.id}
              title={item.media.title}
              year={item.media.year}
              imageUrl={undefined}
              onAdd={() => handleQuickAdd(item)}
              onClick={() => { /* noop in story */ }}
              className="min-h-[280px]"
            />
          ))}
        </div>
      </div>

      <QuickWiggModal
        open={open}
        onOpenChange={setOpen}
        variant={variant}
        media={active}
        units={activeUnits}
      />
    </div>
  );
}

const meta: Meta<typeof GridDemo> = {
  title: 'Flows/MediaTile - Quick Wigg',
  component: GridDemo,
  parameters: { layout: 'fullscreen' },
  decorators: [
    (Story) => (
      <MemoryRouter>
        <Story />
      </MemoryRouter>
    ),
  ],
  argTypes: {
    variant: {
      control: { type: 'inline-radio' },
      options: ['dialog', 'sheet'],
    },
  },
};

export default meta;
type Story = StoryObj<typeof GridDemo>;

export const DialogVariant: Story = { args: { variant: 'dialog' } };
export const SheetVariant: Story = { args: { variant: 'sheet' } };
