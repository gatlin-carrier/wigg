{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gatli/Projects/wigg/apps/wigg-admin/lib/supabaseAdmin.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\n\r\nexport function supabaseAdmin() {\r\nconst url = process.env.NEXT_PUBLIC_SUPABASE_URL!;\r\nconst serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\r\nif (!url || !serviceKey) {\r\n  throw new Error('Missing Supabase env vars (URL or Service Role).');\r\n}\r\nreturn createClient(url, serviceKey, {\r\n  auth: { persistSession: false },\r\n});\r\n}"],"names":[],"mappings":";;;;AAAA;;AAGO,SAAS;IAChB,MAAM;IACN,MAAM,aAAa,QAAQ,GAAG,CAAC,yBAAyB;IACxD,IAAI,CAAC,OAAO,CAAC,YAAY;QACvB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,IAAA,0OAAY,EAAC,KAAK,YAAY;QACnC,MAAM;YAAE,gBAAgB;QAAM;IAChC;AACA","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gatli/Projects/wigg/apps/wigg-admin/lib/schema.ts"],"sourcesContent":["export const SCHEMA = {\r\n  seedTable: process.env.MOMENTS_SEED_TABLE || 'moments_seed',\r\n  momentsTable: process.env.MOMENTS_TABLE || 'moments',\r\n  // Column mappings for seed table (adapt if your schema differs)\r\n  seedCols: {\r\n    id: 'id',\r\n    title: 'content_title',\r\n    season: 'season',\r\n    episode: 'episode',\r\n    minute: 'minute',\r\n    sourceUrl: 'source_url',\r\n    sourceType: 'source_type',\r\n    sourceSubreddit: 'source_subreddit',\r\n    sourceKind: 'source_kind',\r\n    sourceId: 'source_id',\r\n    score: 'score',\r\n    confidence: 'confidence',\r\n    quote: 'quote',\r\n    createdUtc: 'created_utc',\r\n    status: 'status',\r\n    insertedAt: 'inserted_at',\r\n  },\r\n  momentsCols: {\r\n    id: 'id',\r\n    title: 'content_title',\r\n    season: 'season',\r\n    episode: 'episode',\r\n    minute: 'minute',\r\n    confidence: 'confidence',\r\n    sourceUrl: 'source_url',\r\n    source: 'source',\r\n    quoted: 'quoted',\r\n    createdUtc: 'created_utc',\r\n    insertedAt: 'inserted_at',\r\n  },\r\n};"],"names":[],"mappings":";;;;AAAO,MAAM,SAAS;IACpB,WAAW,QAAQ,GAAG,CAAC,kBAAkB,IAAI;IAC7C,cAAc,QAAQ,GAAG,CAAC,aAAa,IAAI;IAC3C,gEAAgE;IAChE,UAAU;QACR,IAAI;QACJ,OAAO;QACP,QAAQ;QACR,SAAS;QACT,QAAQ;QACR,WAAW;QACX,YAAY;QACZ,iBAAiB;QACjB,YAAY;QACZ,UAAU;QACV,OAAO;QACP,YAAY;QACZ,OAAO;QACP,YAAY;QACZ,QAAQ;QACR,YAAY;IACd;IACA,aAAa;QACX,IAAI;QACJ,OAAO;QACP,QAAQ;QACR,SAAS;QACT,QAAQ;QACR,YAAY;QACZ,WAAW;QACX,QAAQ;QACR,QAAQ;QACR,YAAY;QACZ,YAAY;IACd;AACF","debugId":null}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gatli/Projects/wigg/apps/wigg-admin/app/api/moderation/pending/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/supabaseAdmin';\r\nimport { SCHEMA } from '@/lib/schema';\r\n\r\n\r\nexport async function GET(req: NextRequest) {\r\nconst db = supabaseAdmin();\r\nconst { searchParams } = new URL(req.url);\r\nconst q = (searchParams.get('q') || '').trim();\r\nconst page = parseInt(searchParams.get('page') || '1', 10);\r\nconst pageSize = parseInt(process.env.MOD_PAGE_SIZE || '50', 10);\r\nconst from = (page - 1) * pageSize;\r\nconst to = from + pageSize - 1;\r\n\r\n\r\nconst cols = SCHEMA.seedCols;\r\nlet query = db.from(SCHEMA.seedTable)\r\n.select(`${cols.id}, ${cols.title}, ${cols.season}, ${cols.episode}, ${cols.minute}, ${cols.sourceUrl}, ${cols.sourceSubreddit}, ${cols.sourceKind}, ${cols.confidence}, ${cols.quote}, ${cols.createdUtc}, ${cols.score}`, { count: 'exact' })\r\n.eq(cols.status, 'needs_review')\r\n.order(cols.createdUtc, { ascending: false })\r\n.range(from, to);\r\n\r\n\r\nif (q) {\r\n// naive ILIKE on title; adapt if your DB uses a different column\r\nquery = query.ilike(cols.title, `%${q}%`);\r\n}\r\n\r\n\r\nconst { data, count, error } = await query;\r\nif (error) {\r\nreturn NextResponse.json({ error: error.message }, { status: 500 });\r\n}\r\nreturn NextResponse.json({ data, count, page, pageSize });\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAGO,eAAe,IAAI,GAAgB;IAC1C,MAAM,KAAK,IAAA,wKAAa;IACxB,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;IACxC,MAAM,IAAI,CAAC,aAAa,GAAG,CAAC,QAAQ,EAAE,EAAE,IAAI;IAC5C,MAAM,OAAO,SAAS,aAAa,GAAG,CAAC,WAAW,KAAK;IACvD,MAAM,WAAW,SAAS,QAAQ,GAAG,CAAC,aAAa,IAAI,MAAM;IAC7D,MAAM,OAAO,CAAC,OAAO,CAAC,IAAI;IAC1B,MAAM,KAAK,OAAO,WAAW;IAG7B,MAAM,OAAO,0JAAM,CAAC,QAAQ;IAC5B,IAAI,QAAQ,GAAG,IAAI,CAAC,0JAAM,CAAC,SAAS,EACnC,MAAM,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,KAAK,KAAK,CAAC,EAAE,EAAE,KAAK,MAAM,CAAC,EAAE,EAAE,KAAK,OAAO,CAAC,EAAE,EAAE,KAAK,MAAM,CAAC,EAAE,EAAE,KAAK,SAAS,CAAC,EAAE,EAAE,KAAK,eAAe,CAAC,EAAE,EAAE,KAAK,UAAU,CAAC,EAAE,EAAE,KAAK,UAAU,CAAC,EAAE,EAAE,KAAK,KAAK,CAAC,EAAE,EAAE,KAAK,UAAU,CAAC,EAAE,EAAE,KAAK,KAAK,EAAE,EAAE;QAAE,OAAO;IAAQ,GAC5O,EAAE,CAAC,KAAK,MAAM,EAAE,gBAChB,KAAK,CAAC,KAAK,UAAU,EAAE;QAAE,WAAW;IAAM,GAC1C,KAAK,CAAC,MAAM;IAGb,IAAI,GAAG;QACP,iEAAiE;QACjE,QAAQ,MAAM,KAAK,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACxC;IAGA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM;IACrC,IAAI,OAAO;QACX,OAAO,iLAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACjE;IACA,OAAO,iLAAY,CAAC,IAAI,CAAC;QAAE;QAAM;QAAO;QAAM;IAAS;AACvD","debugId":null}}]
}